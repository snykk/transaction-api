// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/snykk/transaction-api/internal/business/domains/v1"
	mock "github.com/stretchr/testify/mock"
)

// WalletRepository is an autogenerated mock type for the WalletRepository type
type WalletRepository struct {
	mock.Mock
}

// CreateWalletByUserId provides a mock function with given fields: ctx, userId
func (_m *WalletRepository) CreateWalletByUserId(ctx context.Context, userId string) (v1.WalletDomain, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for CreateWalletByUserId")
	}

	var r0 v1.WalletDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.WalletDomain, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.WalletDomain); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(v1.WalletDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWallets provides a mock function with given fields: ctx
func (_m *WalletRepository) GetAllWallets(ctx context.Context) ([]v1.WalletDomain, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWallets")
	}

	var r0 []v1.WalletDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.WalletDomain, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.WalletDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.WalletDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWalletByUserId provides a mock function with given fields: ctx, userId
func (_m *WalletRepository) GetWalletByUserId(ctx context.Context, userId string) (v1.WalletDomain, error) {
	ret := _m.Called(ctx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetWalletByUserId")
	}

	var r0 v1.WalletDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (v1.WalletDomain, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) v1.WalletDomain); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(v1.WalletDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWalletRepository creates a new instance of WalletRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWalletRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WalletRepository {
	mock := &WalletRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
