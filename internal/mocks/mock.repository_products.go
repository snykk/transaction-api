// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/snykk/transaction-api/internal/business/domains/v1"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *ProductRepository) DeleteProduct(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields: ctx
func (_m *ProductRepository) GetAllProducts(ctx context.Context) ([]v1.ProductDomain, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []v1.ProductDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]v1.ProductDomain, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []v1.ProductDomain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ProductDomain)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductById provides a mock function with given fields: ctx, id
func (_m *ProductRepository) GetProductById(ctx context.Context, id int) (v1.ProductDomain, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductById")
	}

	var r0 v1.ProductDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (v1.ProductDomain, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) v1.ProductDomain); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(v1.ProductDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) StoreProduct(ctx context.Context, product *v1.ProductDomain) (v1.ProductDomain, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for StoreProduct")
	}

	var r0 v1.ProductDomain
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ProductDomain) (v1.ProductDomain, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ProductDomain) v1.ProductDomain); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(v1.ProductDomain)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1.ProductDomain) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, product
func (_m *ProductRepository) UpdateProduct(ctx context.Context, product *v1.ProductDomain) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1.ProductDomain) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
